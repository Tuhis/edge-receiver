apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "edge-receiver.fullname" . }}
  labels:
    {{- include "edge-receiver.labels" . | nindent 4 }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      {{- include "edge-receiver.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "edge-receiver.selectorLabels" . | nindent 8 }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      containers:
        - name: {{ .Chart.Name }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default (printf "v%s" .Chart.Version) }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
            - name: http
              containerPort: 8088
              protocol: TCP
          startupProbe:
            httpGet:
              path: /ready
              port: http
            failureThreshold: 30
            periodSeconds: 2
          readinessProbe:
            httpGet:
              path: /ready
              port: 8088
            periodSeconds: 5
            failureThreshold: 2
          livenessProbe:
            httpGet:
              path: /health
              port: 8088
            periodSeconds: 5
            failureThreshold: 2
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
          env:
            - name: "KAFKA_BROKERS"
              value: "{{ .Values.kafka.broker }}"
            - name: "KAFKA_STATUS_TOPIC"
              value: "{{ .Values.kafka.statusTopic }}"
            - name: "KAFKA_INGRESS_TOPIC"
              value: "{{ .Values.kafka.ingressTopic }}"
            - name: "OWN_NAME"
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
